import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.builder.Input;
import org.xmlunit.diff.Diff;
import org.xmlunit.diff.Difference;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class XMLComparisonUtil {

    public static void compareXMLAndGenerateExcel(String expectedFilePath, String actualFilePath, String excelOutputPath) throws IOException {
        // Read XML files and remove BOM/whitespace
        String expectedXml = removeBOMAndTrim(new String(Files.readAllBytes(Paths.get(expectedFilePath)), StandardCharsets.UTF_8));
        String actualXml = removeBOMAndTrim(new String(Files.readAllBytes(Paths.get(actualFilePath)), StandardCharsets.UTF_8));

        // Compare XML files
        Diff diff = DiffBuilder.compare(Input.fromString(expectedXml))
                .withTest(Input.fromString(actualXml))
                .ignoreWhitespace()
                .checkForSimilar()
                .build();

        // Store all records (both matching and different) in insertion order
        List<String[]> allRecords = new ArrayList<>();
        allRecords.add(new String[]{"Line", "XPath", "Expected Value", "Actual Value"}); // Header row

        // Store differences in a LinkedHashMap to maintain order
        Map<String, String[]> differencesMap = new LinkedHashMap<>();

        if (diff.hasDifferences()) {
            for (Difference d : diff.getDifferences()) {
                String xPath = d.getComparison().getControlDetails().getXPath();
                String expectedValue = d.getComparison().getControlDetails().getValue() != null
                        ? d.getComparison().getControlDetails().getValue().toString().trim()
                        : "N/A";
                String actualValue = d.getComparison().getTestDetails().getValue() != null
                        ? d.getComparison().getTestDetails().getValue().toString().trim()
                        : "N/A";

                int lineNumber = findLineNumber(expectedXml, expectedValue);

                differencesMap.put(xPath, new String[]{String.valueOf(lineNumber), expectedValue, actualValue});
            }
        }

        // Add all records to the list in the correct order
        for (Map.Entry<String, String[]> entry : differencesMap.entrySet()) {
            allRecords.add(new String[]{entry.getValue()[0], entry.getKey(), entry.getValue()[1], entry.getValue()[2]});
        }

        // Write to Excel
        writeRecordsToExcel(excelOutputPath, allRecords);
    }

    // Removes BOM and trims unnecessary white space
    private static String removeBOMAndTrim(String content) {
        if (content.startsWith("\uFEFF")) {
            content = content.substring(1);
        }
        return content.replaceAll(">\\s+<", "><").trim();
    }

    // Finds the line number for a given value in XML
    private static int findLineNumber(String content, String value) {
        if (value.equals("N/A")) return -1;
        String[] lines = content.split("\n");
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].contains(value)) {
                return i + 1;
            }
        }
        return -1;
    }

    private static void writeRecordsToExcel(String fileName, List<String[]> data) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("XML Comparison");

        // Header Style
        CellStyle headerStyle = workbook.createCellStyle();
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerStyle.setFont(headerFont);

        // Highlight Style for differences
        CellStyle highlightStyle = workbook.createCellStyle();
        highlightStyle.setFillForegroundColor(IndexedColors.YELLOW.getIndex());
        highlightStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

        // Write data
        for (int i = 0; i < data.size(); i++) {
            Row row = sheet.createRow(i);
            for (int j = 0; j < data.get(i).length; j++) {
                Cell cell = row.createCell(j);
                cell.setCellValue(data.get(i)[j]);

                // Apply header style
                if (i == 0) cell.setCellStyle(headerStyle);

                // Apply highlight style to differences
                else if (j >= 2 && !data.get(i)[2].equals(data.get(i)[3])) {
                    cell.setCellStyle(highlightStyle);
                }
            }
        }

        // Auto-size columns
        for (int i = 0; i < data.get(0).length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Write to file
        try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
            workbook.write(outputStream);
        }

        workbook.close();
    }
}
