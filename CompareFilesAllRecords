import org.w3c.dom.*;
import javax.xml.parsers.*;
import org.xmlunit.builder.DiffBuilder;
import org.xmlunit.diff.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

public class XMLComparator {

    public void compareXMLAndGenerateExcel(String expectedFilePath, String actualFilePath, String excelOutputPath) throws Exception {
        // Read XML files after removing BOM
        String expectedXml = new String(Files.readAllBytes(Paths.get(expectedFilePath)), StandardCharsets.UTF_8).trim();
        String actualXml = new String(Files.readAllBytes(Paths.get(actualFilePath)), StandardCharsets.UTF_8).trim();

        // Parse XML into Document objects
        Document expectedDoc = parseXML(expectedXml);
        Document actualDoc = parseXML(actualXml);

        // Precompute XPath-to-value map for the ACTUAL document
        Map<String, String> actualXPathValueMap = new LinkedHashMap<>();
        buildXPathValueMap(actualDoc.getDocumentElement(), actualXPathValueMap);

        // Compare XML files using XMLUnit
        Diff diff = DiffBuilder.compare(Input.fromDocument(expectedDoc))
                .withTest(Input.fromDocument(actualDoc))
                .ignoreWhitespace()
                .checkForSimilar()
                .build();

        // Store all records (matches and differences)
        List<String[]> allRecords = new ArrayList<>();
        allRecords.add(new String[]{"Line", "XPath", "Expected Value", "Actual Value", "Status"}); // Header

        // Process differences
        Map<String, String[]> differencesMap = new LinkedHashMap<>();
        if (diff.hasDifferences()) {
            for (Difference d : diff.getDifferences()) {
                String xPath = d.getComparison().getControlDetails().getXPath();
                String expectedValue = d.getComparison().getControlDetails().getValue() != null ?
                        d.getComparison().getControlDetails().getValue().toString() : "N/A";
                String actualValue = actualXPathValueMap.getOrDefault(xPath, "N/A");
                int lineNumber = findLineNumber(expectedXml, expectedValue);
                differencesMap.put(xPath, new String[]{String.valueOf(lineNumber), expectedValue, actualValue, "Not Matched"});
            }
        }

        // Process all elements in the EXPECTED document
        processNodes(expectedDoc.getDocumentElement(), actualXPathValueMap, differencesMap, allRecords, expectedXml);

        // Write to Excel
        writeRecordsToExcel(excelOutputPath, allRecords);
    }

    // Build a map of XPath to value for the ACTUAL document
    private static void buildXPathValueMap(Node node, Map<String, String> xpathValueMap) {
        if (node.getNodeType() == Node.ELEMENT_NODE) {
            String xpath = getXPath(node);
            String value = node.getTextContent().trim();
            xpathValueMap.put(xpath, value);
            System.out.println("ACTUAL XML: " + xpath + " = " + value);
        }

        NodeList children = node.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            buildXPathValueMap(children.item(i), xpathValueMap);
        }
    }

    // Process nodes in the EXPECTED document and compare values
    private static void processNodes(Node node, Map<String, String> actualXPathValueMap, 
                                     Map<String, String[]> differencesMap, List<String[]> allRecords, String expectedXml) {
        if (node.getNodeType() == Node.ELEMENT_NODE) {
            String xPath = getXPath(node);
            String expectedValue = node.getTextContent().trim();
            String actualValue = actualXPathValueMap.getOrDefault(xPath, "N/A");
            int lineNumber = findLineNumber(expectedXml, expectedValue);

            System.out.println("Processing XPath: " + xPath + 
                               " | Expected: " + expectedValue + 
                               " | Actual: " + actualValue);

            if (differencesMap.containsKey(xPath)) {
                allRecords.add(new String[]{
                        String.valueOf(lineNumber),
                        xPath,
                        differencesMap.get(xPath)[1],
                        differencesMap.get(xPath)[2],
                        "Not Matched"
                });
                differencesMap.remove(xPath);
            } else {
                allRecords.add(new String[]{
                        String.valueOf(lineNumber),
                        xPath,
                        expectedValue,
                        actualValue,
                        expectedValue.equals(actualValue) ? "Matched" : "Not Matched"
                });
            }
        }

        NodeList children = node.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            processNodes(children.item(i), actualXPathValueMap, differencesMap, allRecords, expectedXml);
        }
    }

    // Parse XML content into a Document object
    private static Document parseXML(String xmlContent) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(new InputSource(new StringReader(xmlContent)));
    }

    // Generate XPath for a given node
    private static String getXPath(Node node) {
        if (node == null || node.getNodeType() != Node.ELEMENT_NODE) {
            return "";
        }
        StringBuilder xpath = new StringBuilder();
        Node current = node;
        while (current != null && current.getNodeType() == Node.ELEMENT_NODE) {
            int index = getNodeIndex(current);
            xpath.insert(0, "/" + current.getNodeName() + "[" + index + "]");
            current = current.getParentNode();
        }
        return xpath.toString();
    }

    // Find the line number of a value in the XML content
    private static int findLineNumber(String content, String value) {
        if (value.equals("N/A")) return -1;
        String[] lines = content.split("\n");
        for (int i = 0; i < lines.length; i++) {
            if (lines[i].contains(value)) {
                return i + 1;
            }
        }
        return -1;
    }

    // Write records to an Excel file
    private static void writeRecordsToExcel(String fileName, List<String[]> data) throws IOException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("XML Comparison");

        for (int i = 0; i < data.size(); i++) {
            Row row = sheet.createRow(i);
            for (int j = 0; j < data.get(i).length; j++) {
                Cell cell = row.createCell(j);
                cell.setCellValue(data.get(i)[j]);
            }
        }

        for (int i = 0; i < data.get(0).length; i++) {
            sheet.autoSizeColumn(i);
        }

        try (FileOutputStream outputStream = new FileOutputStream(fileName)) {
            workbook.write(outputStream);
        }
        workbook.close();
    }
}
